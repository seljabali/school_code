{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red192\green18\blue25;\red0\green170\blue0;\red128\green0\blue0;
\red0\green0\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf0 convTable = \{\
\
   \cf2 #Distance\cf0 \
   (\cf3 'm'\cf0 ):       (\cf4 1.\cf0 ,\{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'cm'\cf0 ):      (\cf4 1\cf0 /\cf4 100.\cf0 ,\{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'mm'\cf0 ):      (\cf4 1\cf0 /\cf4 1000.\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'km'\cf0 ):      (\cf4 1\cf0 /\cf4 0.001\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'feet'\cf0 ):    (\cf4 1\cf0 /\cf4 3.2808399\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'foot'\cf0 ):    (\cf4 1\cf0 /\cf4 3.2808399\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'in'\cf0 ):      (\cf4 1\cf0 /\cf4 0.0254\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'inch'\cf0 ):    (\cf4 1\cf0 /\cf4 0.0254\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'inches'\cf0 ):  (\cf4 1\cf0 /\cf4 0.0254\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'smoot'\cf0 ):   (\cf4 1\cf0 /\cf4 1.7018\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'smoots'\cf0 ):  (\cf4 1\cf0 /\cf4 1.7018\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'mile'\cf0 ):    (\cf4 1\cf0 /\cf4 1609.344\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'miles'\cf0 ):   (\cf4 1\cf0 /\cf4 1609.344\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'ly'\cf0 ):      (\cf4 1.05702341\cf0 *\cf4 10\cf0 **-\cf4 16\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'lightyear'\cf0 ):  (\cf4 1.05702341\cf0 *\cf4 10\cf0 **-\cf4 16\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'lightyears'\cf0 ): (\cf4 1.05702341\cf0 *\cf4 10\cf0 **-\cf4 16\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'AU'\cf0 ):         (\cf4 6.68458134\cf0 *\cf4 10\cf0 **-\cf4 12\cf0 , \{\cf3 'm'\cf0 :\cf4 1\cf0 \},\cf3 'm'\cf0 ),\
\
   \cf2 #Weight\cf0 \
   (\cf3 'g'\cf0 ):       (\cf4 1.\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
   (\cf3 'gram'\cf0 ):    (\cf4 1.\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
   (\cf3 'grams'\cf0 ):   (\cf4 1.\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
   (\cf3 'kg'\cf0 ):      (\cf4 1000.\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
   (\cf3 'lb'\cf0 ):      (\cf4 0.00220462262\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
   (\cf3 'lbs'\cf0 ):     (\cf4 0.00220462262\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
   (\cf3 'pound'\cf0 ):   (\cf4 0.00220462262\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
   (\cf3 'pounds'\cf0 ):  (\cf4 0.00220462262\cf0 ,\{\cf3 'g'\cf0 :\cf4 1\cf0 \},\cf3 'g'\cf0 ),\
\
   (\cf3 'acre'\cf0 ):    (\cf4 4046.85642\cf0 ,\{\cf3 'm'\cf0 :\cf4 2\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'acres'\cf0 ):   (\cf4 4046.85642\cf0 ,\{\cf3 'm'\cf0 :\cf4 2\cf0 \},\cf3 'm'\cf0 ),\
\
   \cf2 #Time\cf0 \
   (\cf3 's'\cf0 ):       (\cf4 1.\cf0 , \{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'sec'\cf0 ):     (\cf4 1.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'secs'\cf0 ):    (\cf4 1.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'second'\cf0 ):  (\cf4 1.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'seconds'\cf0 ): (\cf4 1.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'min'\cf0 ):     (\cf4 60.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'minute'\cf0 ):  (\cf4 60.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'minutes'\cf0 ): (\cf4 60.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'h'\cf0 ):       (\cf4 3600.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'hour'\cf0 ):    (\cf4 3600.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'hours'\cf0 ):   (\cf4 3600.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'day'\cf0 ):     (\cf4 86400.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'days'\cf0 ):    (\cf4 86400.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'year'\cf0 ):    (\cf4 31556926.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
   (\cf3 'years'\cf0 ):   (\cf4 31556926.\cf0 ,\{\cf3 's'\cf0 :\cf4 1\cf0 \},\cf3 's'\cf0 ),\
\
   \cf2 #Volume\cf0 \
   (\cf3 'a cup'\cf0 ):    (\cf4 0.000236588238\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'a cups'\cf0 ):   (\cf4 0.000236588238\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'cup'\cf0 ):      (\cf4 0.000236588238\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'cups'\cf0 ):     (\cf4 0.000236588238\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'L'\cf0 ):        (\cf4 0.001\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'l'\cf0 ):        (\cf4 0.001\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'liter'\cf0 ):    (\cf4 0.001\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'liters'\cf0 ):   (\cf4 0.001\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'Liter'\cf0 ):    (\cf4 0.001\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'Liters'\cf0 ):   (\cf4 0.001\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'teaspoon'\cf0 ): (\cf4 4.92892161\cf0 *\cf4 10\cf0 **-\cf4 6\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'teaspoons'\cf0 ):(\cf4 4.92892161\cf0 *\cf4 10\cf0 **-\cf4 6\cf0 , \{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'kilderkin'\cf0 ): (\cf4 0.0818296538\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'kilderkins'\cf0 ):(\cf4 0.0818296538\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'pint'\cf0 ):      (\cf4 0.000473176475\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'pints'\cf0 ):     (\cf4 0.000473176475\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
   (\cf3 'fl oz'\cf0 ):     (\cf4 2.95735297\cf0 *\cf4 10\cf0 **-\cf4 5\cf0 ,\{\cf3 'm'\cf0 :\cf4 3\cf0 \},\cf3 'm'\cf0 ),\
\
   \cf2 #Speed\cf0 \
   (\cf3 'mph'\cf0 ):   (\cf4 0.44704\cf0 ,\{\cf3 'm'\cf0 :\cf4 1\cf0 , \cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'm'\cf0 ,\cf3 's'\cf0 ),\
   (\cf3 'c'\cf0 ):     (\cf4 299792458.\cf0 ,\{\cf3 'm'\cf0 :\cf4 1\cf0 , \cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'm'\cf0 ,\cf3 's'\cf0 ),\
   (\cf3 'knot'\cf0 ):  (\cf4 0.514444444\cf0 ,\{\cf3 'm'\cf0 :\cf4 1\cf0 , \cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'm'\cf0 ,\cf3 's'\cf0 ),\
   (\cf3 'knots'\cf0 ): (\cf4 0.514444444\cf0 ,\{\cf3 'm'\cf0 :\cf4 1\cf0 , \cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'm'\cf0 ,\cf3 's'\cf0 ),\
\
   \cf2 #Energy\cf0 \
   (\cf3 'J'\cf0 ):        (\cf4 1.\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'Joule'\cf0 ):    (\cf4 1.\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'Joules'\cf0 ):   (\cf4 1.\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'joule'\cf0 ):    (\cf4 1.\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'joules'\cf0 ):   (\cf4 1.\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'cal'\cf0 ):      (\cf4 4.18400\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'calorie'\cf0 ):  (\cf4 4.18400\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'calories'\cf0 ): (\cf4 4.18400\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'Cal'\cf0 ):      (\cf4 4.18400\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'Calorie'\cf0 ):  (\cf4 4.18400\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
   (\cf3 'Calories'\cf0 ): (\cf4 4.18400\cf0 ,\{\cf3 'J'\cf0 :\cf4 1\cf0 \},\cf3 'J'\cf0 ),\
\
   (\cf3 'W'\cf0 ):        (\cf4 1.\cf0 , \{\cf3 'J'\cf0 :\cf4 1\cf0 ,\cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'J'\cf0 ,\cf3 's'\cf0 ),\
   (\cf3 'Watt'\cf0 ):     (\cf4 1.\cf0 , \{\cf3 'J'\cf0 :\cf4 1\cf0 ,\cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'J'\cf0 ,\cf3 's'\cf0 ),\
   (\cf3 'watt'\cf0 ):     (\cf4 1.\cf0 , \{\cf3 'J'\cf0 :\cf4 1\cf0 ,\cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'J'\cf0 ,\cf3 's'\cf0 ),\
   (\cf3 'Watts'\cf0 ):    (\cf4 1.\cf0 , \{\cf3 'J'\cf0 :\cf4 1\cf0 ,\cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'J'\cf0 ,\cf3 's'\cf0 ),\
   (\cf3 'watts'\cf0 ):    (\cf4 1.\cf0 , \{\cf3 'J'\cf0 :\cf4 1\cf0 ,\cf3 's'\cf0 :-\cf4 1\cf0 \},\cf3 'J'\cf0 ,\cf3 's'\cf0 ),\
\}\
\
\pard\pardeftab720
\cf5 def\cf0  printResult(val):\
    value = val[\cf4 0\cf0 ]\
    unit = val[\cf4 1\cf0 ]\
    \cf5 print\cf0  value,\cf3 '*'\cf0 ,\
    \cf5 for\cf0  k \cf5 in\cf0  unit:\
        \cf5 print\cf0  k,\cf3 '^'\cf0 ,unit[k]\
            \
\pard\pardeftab720
\cf2 #--------------------------MATH FUNCTIONS---------------------------------    \cf0 \
    \
\pard\pardeftab720
\cf5 def\cf0  Add(x,y):        \
    \cf5 if\cf0  x[\cf4 1\cf0 ].keys() != y[\cf4 1\cf0 ].keys():\
        \cf5 print\cf0  \cf3 'diff keys'\cf0 \
        \cf5 return\cf0  \cf5 None\cf0 \
    \cf5 else\cf0 :\
        sum = [\cf4 0\cf0 ,x[\cf4 1\cf0 ]]\
        sum[\cf4 0\cf0 ] = x[\cf4 0\cf0 ] + y[\cf4 0\cf0 ]\
        \cf5 return\cf0  sum\
\
\cf5 def\cf0  Convert(From,To):\
    result = [From[\cf4 0\cf0 ],\{\}]\
    stopFlag = \cf5 False\cf0 \
    \cf5 for\cf0  unit \cf5 in\cf0  To[\cf4 1\cf0 ]:\
        conv = convTable[unit]\
            \
        \cf5 if\cf0   unit == \cf3 "mph"\cf0  \cf5 or\cf0  unit == \cf3 'c'\cf0  \cf5 or\cf0  unit == \cf3 'knot'\cf0  \cf5 or\cf0  unit == \cf3 'knots'\cf0 :\
            stopFlag = \cf5 True\cf0     \
\pard\pardeftab720
\cf2 #        for u in conv[1]:                #get meters, sec\cf0 \
\cf2 #            convertedUnits[u] = conv[1][u]   \cf0 \
        \cf5 for\cf0  i \cf5 in\cf0  range(len(conv)):\
            \cf5 if\cf0  i > \cf4 1\cf0 :\
                temp = conv[i]\
                \cf5 if\cf0  From[\cf4 1\cf0 ].has_key(temp):\
                    exp = From[\cf4 1\cf0 ][temp]\
                \cf5 else\cf0 :\
                    \cf5 print\cf0  \cf3 "Mismatch: Can't convert"\cf0 \
                    \cf5 return\cf0  \cf5 None\cf0 \
                \cf2 #print "To:",unit         \cf0 \
                \cf2 #print "Conv:",conv\cf0 \
                result[\cf4 1\cf0 ][unit] = exp\
                \cf5 if\cf0  stopFlag:\
                    result[\cf4 0\cf0 ] *= (\cf4 1\cf0 /conv[\cf4 0\cf0 ])**exp\
                    result[\cf4 1\cf0 ] = conv[\cf4 1\cf0 ]\
                    \cf2 #print result\cf0 \
                    \cf5 break\cf0 \
                \cf5 elif\cf0  exp >\cf4 1\cf0 : \cf2 #3:\cf0 \
                    result[\cf4 0\cf0 ] *= (\cf4 1\cf0 /conv[\cf4 0\cf0 ])\
                \cf5 else\cf0 :\
                    result[\cf4 0\cf0 ] *= (\cf4 1\cf0 /conv[\cf4 0\cf0 ])**exp\
    \cf2 #print stopFlag\cf0 \
    \cf2 #print conv[1] == \{'s':-1,'m':1\}\cf0 \
    \
    \cf5 if\cf0  stopFlag \cf5 and\cf0  (conv[\cf4 1\cf0 ] == \{\cf3 's'\cf0 :-\cf4 1\cf0 ,\cf3 'm'\cf0 :\cf4 1\cf0 \} \cf5 or\cf0  conv[\cf4 1\cf0 ] == \{\cf3 'm'\cf0 :\cf4 1\cf0 ,\cf3 's'\cf0 :-\cf4 1\cf0 \}):\
        \cf5 print\cf0  \cf3 "Result:"\cf0 ,result\
        \cf5 return\cf0  result        \
    \cf5 elif\cf0  result[\cf4 1\cf0 ]!= To[\cf4 1\cf0 ]:\
        \cf5 print\cf0  \cf3 "Mismatch: Can't convert"\cf0 \
        \cf5 print\cf0  \cf3 "Result:"\cf0 ,result[\cf4 1\cf0 ]\
        \cf5 print\cf0  \cf3 "To:"\cf0 ,To[\cf4 1\cf0 ]\
    \cf5 else\cf0 :\
        \cf5 print\cf0  \cf3 "Result:"\cf0 ,result\
\
\pard\pardeftab720
\cf5 def\cf0  Divide(x,y):\
    quotient = [\cf4 0\cf0 ,\{\}]\
    \cf5 if\cf0  (type(y) == type(\cf4 69\cf0 ) \cf5 and\cf0  y==\cf4 0\cf0 ) \cf5 or\cf0  (type(y) == type([]) \cf5 and\cf0  y[\cf4 0\cf0 ]==\cf4 0\cf0 ):\
        \cf5 print\cf0  \cf3 "Can't divide by zero!"\cf0 \
        \cf5 return\cf0  \cf5 None\cf0 \
    \
    \cf5 if\cf0  type(x) == type(\cf4 69\cf0 ):\
        \cf5 if\cf0  type(y) == type([]):                   \
            quotient[\cf4 0\cf0 ] =  x / y[\cf4 0\cf0 ]\
        \cf5 else\cf0 :\
            quotient[\cf4 0\cf0 ] =  x / y\
            \cf5 return\cf0  quotient\
    \cf5 else\cf0 :\
        \cf5 if\cf0  type(y) == type([]):\
            quotient[\cf4 0\cf0 ] =  x[\cf4 0\cf0 ] / y[\cf4 0\cf0 ]\
        \cf5 else\cf0 :\
            quotient[\cf4 0\cf0 ] = x[\cf4 0\cf0 ] / y\
            quotient[\cf4 1\cf0 ] = x[\cf4 1\cf0 ]\
            \cf5 return\cf0  quotient \
    \
    \cf5 if\cf0  len(y[\cf4 1\cf0 ]) == \cf4 0\cf0 :    \cf2 #Dividing by scalar\cf0 \
        quotient[\cf4 1\cf0 ] = x[\cf4 1\cf0 ]\
        \cf5 return\cf0  quotient\
    \
    \cf5 for\cf0  unit \cf5 in\cf0  x[\cf4 1\cf0 ]:    \cf2 #Add powers of common units in X and Y\cf0 \
        \cf5 if\cf0  y[\cf4 1\cf0 ].has_key(unit):\
            quotient[\cf4 1\cf0 ][unit] =  x[\cf4 1\cf0 ][unit] - y[\cf4 1\cf0 ][unit]\
        \cf5 else\cf0 :\
            quotient[\cf4 1\cf0 ][unit] =  x[\cf4 1\cf0 ][unit]\
    \
    \cf5 for\cf0  unit \cf5 in\cf0  y[\cf4 1\cf0 ]:    \cf2 #Add powers from Y that aren't in X\cf0 \
        \cf5 if\cf0  \cf5 not\cf0  quotient[\cf4 1\cf0 ].has_key(unit):\
            quotient[\cf4 1\cf0 ][unit] = -\cf4 1\cf0  * y[\cf4 1\cf0 ][unit]\
    \
    toRemove = [] \cf2 #If there are any 0 exponents\cf0 \
    \cf5 for\cf0  unit \cf5 in\cf0  quotient[\cf4 1\cf0 ]:\
        \cf5 if\cf0  quotient[\cf4 1\cf0 ][unit] == \cf4 0\cf0 :\
            toRemove.append(unit)\
    \cf5 for\cf0  unit \cf5 in\cf0  toRemove:\
        \cf5 del\cf0  quotient[\cf4 1\cf0 ][unit]\
        \
    \cf5 return\cf0  quotient\
        \
\cf5 def\cf0  Factorial(x):\
    \cf5 def\cf0  FactHelper(num):\
        \cf5 if\cf0  num==\cf4 0\cf0 :\
            \cf5 return\cf0  \cf4 1\cf0 \
        \cf5 else\cf0 :\
            \cf5 return\cf0  num*FactHelper(num-\cf4 1\cf0 )\
    \
    \cf5 if\cf0  type(x) == type([]):\
        \cf5 if\cf0  x[\cf4 1\cf0 ] != \cf5 None\cf0 :\
            \cf5 print\cf0  \cf3 "Error: Factorials are defined for positive, dimensionless integers only"\cf0 \
            \cf5 return\cf0  \cf5 None\cf0 \
        num = FactHelper(x[\cf4 0\cf0 ])\
        \cf5 print\cf0  [num, x[\cf4 1\cf0 ]]\
        \cf5 return\cf0  [num, x[\cf4 1\cf0 ]]\
    \cf5 else\cf0 :\
        \cf5 print\cf0  FactHelper(x)\
        \cf5 return\cf0  FactHelper(x)\
\
\cf5 def\cf0  Root(x,y):\
    \cf5 return\cf0  Pow(x,(\cf4 1\cf0 /y))\
\
\cf5 def\cf0  Subtract(x,y):\
    \cf5 if\cf0  x[\cf4 1\cf0 ].keys() != y[\cf4 1\cf0 ].keys():\
        \cf5 print\cf0  \cf3 'diff keys'\cf0 \
        \cf5 return\cf0  \cf5 None\cf0 \
    \cf5 else\cf0 :\
        diff = [\cf4 0\cf0 ,x[\cf4 1\cf0 ]]\
        diff[\cf4 0\cf0 ] = x[\cf4 0\cf0 ] + y[\cf4 0\cf0 ]\
        \cf5 return\cf0  diff \
\
\cf5 def\cf0  Times(x,y):\
    product = [\cf4 1\cf0 ,\{\}]\
    \cf5 if\cf0  type(x) == type(\cf4 69\cf0 ):        \cf2 #X is scalar\cf0 \
        \cf5 if\cf0  type(y) == type([]):\
            product[\cf4 0\cf0 ] = x * y[\cf4 0\cf0 ]\
            product[\cf4 1\cf0 ] = y[\cf4 1\cf0 ]\
            \cf5 return\cf0  product\
        \cf5 else\cf0 :       \
            product[\cf4 0\cf0 ] =  x * y\
            \cf5 return\cf0  product\
    \cf5 else\cf0 :                            \cf2 #Y is a scalar\cf0 \
        \cf5 if\cf0  type(y) == type(\cf4 69\cf0 ):\
            product[\cf4 0\cf0 ] = x[\cf4 0\cf0 ] * y\
            product[\cf4 1\cf0 ] = x[\cf4 1\cf0 ]\
            \cf5 return\cf0  product\
        \cf5 else\cf0 :\
            product[\cf4 0\cf0 ] = x[\cf4 0\cf0 ] * y[\cf4 0\cf0 ]\
            \cf5 for\cf0  unit \cf5 in\cf0  x[\cf4 1\cf0 ]:    \cf2 #Add powers of common units in X and Y\cf0 \
                \cf5 if\cf0  y[\cf4 1\cf0 ].has_key(unit):\
                    product[\cf4 1\cf0 ][unit] =  x[\cf4 1\cf0 ][unit] + y[\cf4 1\cf0 ][unit]\
                \cf5 else\cf0 :\
                    product[\cf4 1\cf0 ][unit] =  x[\cf4 1\cf0 ][unit]        \
            \cf5 for\cf0  unit \cf5 in\cf0  y[\cf4 1\cf0 ]:    \cf2 #Add powers from Y that aren't in X\cf0 \
                \cf5 if\cf0  \cf5 not\cf0  product[\cf4 1\cf0 ].has_key(unit):\
                    product[\cf4 1\cf0 ][unit] = y[\cf4 1\cf0 ][unit]\
            \cf5 return\cf0  product      \
     \
\cf5 def\cf0  Negate(x):\
    \cf5 if\cf0  type(x) == type([]):\
        \cf5 return\cf0  [x[\cf4 0\cf0 ] *(-\cf4 1\cf0 ), x[\cf4 1\cf0 ]]\
    \cf5 else\cf0 :\
        \cf5 return\cf0  x*(-\cf4 1\cf0 )\
\
\cf5 def\cf0  Pow(x,y):\
    \cf5 if\cf0  type(x) == type([]):\
        exp = [x[\cf4 0\cf0 ]**y, \{\}]\
        \cf5 for\cf0  unit \cf5 in\cf0  x[\cf4 1\cf0 ]:\
            exp[\cf4 1\cf0 ][unit] = exp[\cf4 1\cf0 ][unit] ** y\
        \cf5 return\cf0  exp  \
    \cf5 else\cf0 :\
        \cf5 return\cf0  x**y\
\pard\pardeftab720
\cf2 #--------------------------END OF MATH FUNCTIONS---------------------------------\cf0 \
\
\pard\pardeftab720
\cf5 class\cf0  Term:\
    \cf2 #unitList (unit, exponent)    \cf0 \
    \cf5 def\cf0  __init__(self,unit):\
        self.result = convTable[unit]\
        self.val = [\cf4 1\cf0 *self.result[\cf4 0\cf0 ], self.result[\cf4 1\cf0 ]] \
    \
    \cf5 def\cf0  getVal(self):\
        \cf5 return\cf0  self.val}