{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red0\green170\blue0;\red128\green0\blue0;
\red192\green18\blue25;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf2 import\cf0  ast, copy\
\cf2 class\cf0  Types(ast.Visitor):\
\
    \cf2 def\cf0  __init__ (self, emitter):\
        self.out = emitter\
        self.e = emitter\
        self.table = \{\cf3 'class'\cf0 :\{\},\cf3 'methods'\cf0 :\{\cf3 'fields'\cf0 : \{\}\}, \cf3 'fields'\cf0 : \{\}\}\
        self.static = \cf2 False\cf0 \
        self.curClassName = \cf2 None\cf0 \
        \
        self.inFuncDecl = \cf2 False\cf0 \
        self.inClassFuncDecl = \cf2 False\cf0 \
        self.inClass = \cf2 False\cf0 \
        self.FuncName = \cf2 None\cf0 \
        self.construct = \cf2 False\cf0 \
\
        self.VarTypes = []\
        self.FuncTypes = []\
        \
        self.curMethod = \cf2 None\cf0 \
        self.toAdd = \cf2 None\cf0 \
        \
        self.lvl = \cf4 0\cf0 \
        \
    \cf2 def\cf0  visitClassA(self, c_):\
        self.inClass = \cf2 True\cf0 \
        self.curClassName = c_.cname.value                  \
        self.table[\cf3 'class'\cf0 ][self.curClassName] = \{\cf3 'super'\cf0 :\cf2 None\cf0 ,\cf3 'fields'\cf0 :\{\}, \cf3 'methods'\cf0 :\{\}\}\
        \
        \cf2 if\cf0  c_.csuper:\
            self.table[\cf3 'class'\cf0 ][self.curClassName][\cf3 'super'\cf0 ] = c_.csuper.value\
        \cf2 else\cf0 :\
            self.table[\cf3 'class'\cf0 ][self.curClassName][\cf3 'super'\cf0 ] = \cf2 None\cf0 \
        c_.cbody.accept(self)\
        self.inClass = \cf2 False\cf0 \
\
    \cf2 def\cf0  visitCBlock(self, b_):\
        self.inClass = \cf2 True\cf0 \
        self.inFuncDecl = \cf2 False\cf0 \
        \cf2 for\cf0  o \cf2 in\cf0  b_.children:\
            self.static = o[\cf4 1\cf0 ]\
            \cf2 if\cf0  type(o) == type((\cf3 'tu'\cf0 ,\cf3 'ple'\cf0 )):\
                \cf2 if\cf0  isinstance(o[\cf4 0\cf0 ], ast.Statements.FunctionDecl): \cf5 #print o[0].name.value\cf0 \
                    self.curMethod = \cf2 None\cf0 \
            o[\cf4 0\cf0 ].accept(self)\
\
    \cf2 def\cf0  visitFunctionDecl (self, decl):\
        self.inFuncDecl = \cf2 True\cf0 \
        self.toAdd = []\
        self.lvl = \cf4 0\cf0 \
            \
        \cf2 if\cf0  self.inClass:\
            oldClassFuncDecl = self.inClassFuncDecl\
            self.inClassFuncDecl = \cf2 True\cf0 \
            \
            \cf2 if\cf0  self.curMethod == \cf2 None\cf0 :\
                self.curMethod = \cf2 True\cf0 \
                \cf5 #self.table['class'][self.curClassName]['methods'][decl.name.value] = []\cf0 \
                            \
\pard\pardeftab720
\cf5 #            if self.static:\cf0 \
\cf5 #                self.toAdd.append(True)\cf0 \
\cf5 #                self.static = False\cf0 \
\cf5 #            else:\cf0 \
\cf5 #                self.toAdd.append(False)\cf0 \
                \
        self.FuncName = decl.name.value\
        oldfunc = self.inFuncDecl\
        \
        self.inFuncDecl = \cf2 True\cf0 \
        decl.function.accept (self)\
        \
        \
        \cf2 if\cf0  self.curMethod:\
            \cf2 if\cf0  len(self.toAdd[\cf4 0\cf0 ]) > \cf4 0\cf0 :\
                self.table[\cf3 'class'\cf0 ][self.curClassName][\cf3 'methods'\cf0 ][decl.name.value] = copy.deepcopy(self.toAdd)\
        self.inFuncDecl = oldfunc\
        self.FuncName = \cf2 None\cf0 \
        \
        \cf2 if\cf0  self.inClass:\
            self.inClassFuncDecl = oldClassFuncDecl\
        \
    \cf2 def\cf0  visitFunction (self, function):\
        \cf5 #self.inFuncDecl = True\cf0 \
        \cf3 """function type"""\cf0   \
        list = []\
        \cf2 if\cf0  getattr(function, \cf3 'typeDecorator'\cf0 ):\
            self.FuncTypes = []\
            function.typeDecorator.accept(self) \
    \
            \cf2 if\cf0  self.inClass:\
                \cf2 if\cf0  (len(self.FuncTypes) > \cf4 0\cf0 ):\
                    list.append(self.FuncTypes)\
            \cf2 else\cf0 :\
                self.table[\cf3 'methods'\cf0 ][self.FuncName].append(self.FuncTypes)            \
        \
        \cf3 """function parameters"""\cf0 \
        \cf2 if\cf0  len(function.parameters.children) > \cf4 0\cf0 :\
            cargs = []\
            \cf2 for\cf0  c \cf2 in\cf0  function.parameters.children:\
                \cf2 if\cf0  c:\
                    \cf2 if\cf0  c[\cf4 1\cf0 ]:\
                        cargs.append((c[\cf4 0\cf0 ].value,c[\cf4 1\cf0 ].value.value))\
                    \cf2 else\cf0 :\
                        cargs.append(c[\cf4 0\cf0 ].value)\
            \cf2 if\cf0  self.inClass:\
                \cf2 if\cf0  (len(list) > \cf4 0\cf0 ):\
                    list.append(cargs)\
                \cf2 else\cf0 : \
                    list = cargs\
            \cf2 else\cf0 :\
                \cf2 if\cf0  (len(cargs) > \cf4 0\cf0 ):\
                    self.table[\cf3 'methods'\cf0 ][self.FuncName] = cargs\
        \
        \cf2 if\cf0  self.lvl == \cf4 0\cf0 :\
            \cf2 if\cf0  (len(list) > \cf4 0\cf0  \cf2 and\cf0  len(self.toAdd) == \cf4 0\cf0 ):\
                self.toAdd = list\
            \cf2 else\cf0 :\
                self.toAdd.append(list)\
        \cf2 else\cf0 :\
            \cf2 if\cf0  (len(list) > \cf4 0\cf0  \cf2 and\cf0  len(self.toAdd[self.lvl-\cf4 1\cf0 ]) == \cf4 0\cf0 ):\
                self.toAdd[self.lvl-\cf4 1\cf0 ] = list\
            \cf2 else\cf0 :\
                self.toAdd[self.lvl-\cf4 1\cf0 ].append(list)\
            \
        oldfunc = self.inFuncDecl\
        \cf5 #self.inFuncDecl = False   #Change \cf0 \
        function.body.accept (self)\
        self.inFuncDecl = oldfunc        \
        \
        self.lvl = self.lvl + \cf4 1\cf0 \
              \
    \cf5 #-----Variables-------#      \cf0 \
    \cf2 def\cf0  visitVarDecl (self, decl):\
        types = []\
        self.VarTypes = []\
        decl.typeDecorator.accept(self)\
        \cf5 #for t in decl.typeDecorator.children:\cf0 \
        \cf5 #    t.accept(self)\cf0 \
\
        \cf5 #print self.VarTypes   \cf0 \
        \cf2 if\cf0  (\cf2 not\cf0  self.inClass) \cf2 and\cf0  (\cf2 not\cf0  self.inClassFuncDecl):\
            self.table[\cf3 'fields'\cf0 ][decl.name.value] = []\
            \cf2 if\cf0  (len(self.VarTypes) > \cf4 0\cf0 ):\
                self.table[\cf3 'fields'\cf0 ][decl.name.value].append(copy.deepcopy(self.VarTypes))\
            \cf5 #if decl.initializer:\cf0 \
            \cf5 #    decl.initializer.accept (self) \cf0 \
        \cf2 elif\cf0  self.inClass \cf2 and\cf0  (\cf2 not\cf0  self.inClassFuncDecl):\
            self.table[\cf3 'class'\cf0 ][self.curClassName][\cf3 'fields'\cf0 ][decl.name.value] = []\
            \cf2 if\cf0  (len(self.VarTypes) > \cf4 0\cf0 ):\
                self.table[\cf3 'class'\cf0 ][self.curClassName][\cf3 'fields'\cf0 ][decl.name.value].append(copy.deepcopy(self.VarTypes))\
        \cf2 elif\cf0  self.inClass \cf2 and\cf0  self.inClassFuncDecl:\
            \cf2 print\cf0  self.FuncName, self.lvl, decl.name.value\
            \
            \cf5 #HHHEEEERREEEEEE\cf0 \
            \cf5 #self.table['class'][self.curClassName]['methods'][self.FuncName]  = \{\}#['fields'] = \{\}\cf0 \
            \cf5 #self.table['class'][self.curClassName]['methods']['fields'] = \{\} \cf0 \
            \cf5 #print self.table['class'][self.curClassName]['methods']\cf0 \
            \cf5 #self.table['class'][self.curClassName]['methods'][self.FuncName]['fields'] = \{\} #[decl.name.value] = decl.initializer.value\cf0 \
            \cf5 #self.table['class'][self.curClassName]['methods'][self.FuncName]['fields'][decl.name.value] = decl.initializer.value \cf0 \
            \cf5 #print self.table['class'][self.curClassName]['methods'][self.FuncName]\cf0 \
                \
\
    \cf5 #------Types-------#\cf0 \
    \cf2 def\cf0  visitArrowType(self,arrow):\
        arrow.lhs.accept (self)\
        arrow.rhs.accept (self)\
    \
    \cf2 def\cf0  visitAtomType(self,atom):\
        \cf2 if\cf0  self.inFuncDecl:\
            \cf2 if\cf0  atom.value.value != []:\
                self.FuncTypes = atom.value.value\
            \cf2 else\cf0 :\
                self.FuncTypes = atom.value\
        \cf2 else\cf0 :\
            \cf2 if\cf0  atom.value.value != []:\
                self.VarTypes = atom.value.value\
            \cf2 else\cf0 :\
                self.VarTypes = atom.value\
        atom.value.accept (self)\
        \
    \cf2 def\cf0  visitTupleType (self,tuple):\
        \cf2 for\cf0  n \cf2 in\cf0  tuple.nuargs:\
            n.value.accept (self)\
    \
    \cf2 def\cf0  visitDynamicType (self,dynamic):\
        dynamic.value.accept (self)}