#Sami Eljabali
#19059321
#S133BQ
#Cross Validation

Initially I didn't know about the sample function so I came up with an extremely inefficient algorithm which ran in O(n^2), which located in the O(N^2).R. Since I ran through each element and randomly removed one at a time, thereafter appending it to a temporary vector. It was interesting to see how it ran ok with c(100,200, 500, 750, 1000, 5000) in testCV however when I ran it all together it more than 30 mins of a Dual Core crunching. 	

After I discovered the sample function I rewrote my vFold function, which is located in vFold1.R, and got the following summaries: 

OPTION 1(Before):
	$by.self
	                       self.time self.pct total.time total.pct
	"append"                    4.12     63.2       4.88      74.8
	"sample"                    1.12     17.2       1.12      17.2
	":"                         0.74     11.3       0.74      11.3
	"matrix"                    0.28      4.3       0.40       6.1
	"apply"                     0.10      1.5       6.50      99.7
	"as.vector"                 0.10      1.5       0.10       1.5
	"<="                        0.02      0.3       0.02       0.3
	"as.vector                  0.02      0.3       0.02       0.3
	"inherits"                  0.02      0.3       0.02       0.3
	"testcv"                    0.00      0.0       6.50      99.7
	"FUN"                       0.00      0.0       6.40      98.2
	"f"                         0.00      0.0       6.40      98.2
	".signalSimpleWarning"      0.00      0.0       0.02       0.3
	"is.factor"                 0.00      0.0       0.02       0.3
	"makeRestart"               0.00      0.0       0.02       0.3
	"makeRestartList"           0.00      0.0       0.02       0.3
	"match"                     0.00      0.0       0.02       0.3
	"structure"                 0.00      0.0       0.02       0.3
	"withRestarts"              0.00      0.0       0.02       0.3

	$sampling.time
	[1] 6.52


I realized that append takes a lot of time since it's a larger function which works on a lot of objects opposed to concatenate.

OPTION 1(After):
	$by.self
	                       self.time self.pct total.time total.pct
	"f"                         1.10     44.7       2.32      94.3
	"sample"                    0.86     35.0       0.86      35.0
	"matrix"                    0.18      7.3       0.36      14.6
	"as.vector"                 0.16      6.5       0.16       6.5
	"apply"                     0.12      4.9       2.44      99.2
	"<"                         0.02      0.8       0.02       0.8
	"seq_along"                 0.02      0.8       0.02       0.8
	"testcv"                    0.00      0.0       2.44      99.2
	"FUN"                       0.00      0.0       2.32      94.3
	"                           0.00      0.0       0.02       0.8
	".signalSimpleWarning"      0.00      0.0       0.02       0.8
	"makeRestartList"           0.00      0.0       0.02       0.8
	"withRestarts"              0.00      0.0       0.02       0.8

$sampling.time
[1] 2.46

As you can see the change was tremendous. 

OPTION 2(Before & After):
$by.self
                       self.time self.pct total.time total.pct
"append"                    1.26     58.9       1.48      69.2
"sample"                    0.36     16.8       0.36      16.8
":"                         0.20      9.3       0.20       9.3
"matrix"                    0.14      6.5       0.20       9.3
"apply"                     0.08      3.7       2.12      99.1
"f"                         0.02      0.9       2.04      95.3
"<="                        0.02      0.9       0.02       0.9
"as.vector"                 0.02      0.9       0.02       0.9
"attributes<-"              0.02      0.9       0.02       0.9
"doWithOneRestart"          0.02      0.9       0.02       0.9
"testcv"                    0.00      0.0       2.12      99.1
"FUN"                       0.00      0.0       2.04      95.3
".signalSimpleWarning"      0.00      0.0       0.04       1.9
"withRestarts"              0.00      0.0       0.04       1.9
"makeRestart"               0.00      0.0       0.02       0.9
"makeRestartList"           0.00      0.0       0.02       0.9
"structure"                 0.00      0.0       0.02       0.9
"withOneRestart"            0.00      0.0       0.02       0.9

$sampling.time
[1] 2.14

After seeing the timings of different options before and after I noticed they were almost alike, and the differences were in the hands of the Operating System. For example it could ran a different program while running the test longer. 

Other changes I made:
I also removed a lot of the variable declarations outside of the different options for readability reasons. 

I also generalized that rows = ceiling (n / v) at all times, instead of rows = n / v  when they fold perfectly and rows = floor(n / v) + 1 when they don't.

Removed Error checking to optimize timings and be equally tested among others. However it is commented for future use.