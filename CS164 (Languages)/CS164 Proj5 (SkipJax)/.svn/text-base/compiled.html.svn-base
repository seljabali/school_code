<?xml version="1.0" ?><html>
   <head><script src="skipjax.js" type="text/javascript"></script><title>FishEye Menu</title>
<script src="http://webfiles.berkeley.edu/nthukral/shared/skipjax.js" type="text/javascript"><!----></script>


<style type="text/css">

	body {
		background-color: #AAAAFF;
	}

   	.pic {
   		float: center;
		margin: 10px 10px 10px 10px;
		background-color: #9999FF;
		border: 1px #DDDDFF solid;
		padding: 0px;
		overflow: hidden;
    }

    #images {
    	border: 1px solid #DDDDFF;
		overflow: hidden;
		background-color: #BBBBFF;
		padding: 0px 20px 10px 0px;
		margin: 10px auto 0px auto;
		vertical-align: top;
    } 

</style>

   </head>
   <body id="BODY">
   		<p>Request a tag here: <input align="left" id="nexTag" type="text"/><span id="loaddisplay" text-align="right"/></p>
   		     
		<div align="center" id="images">
	     	<img class="pic" id="image1" src="http://www.olegvolk.net/olegv/north/emu.jpg"/>
	     	<img class="pic" id="image2" src="http://www.olegvolk.net/olegv/north/emu.jpg"/>         
	     	<img class="pic" id="image3" src="http://www.olegvolk.net/olegv/north/emu.jpg"/>        		
	     	<img class="pic" id="image4" src="http://www.olegvolk.net/olegv/north/emu.jpg"/>    		
	     	<img class="pic" id="image5" src="http://www.olegvolk.net/olegv/north/emu.jpg"/>		         
        </div>


       <p>Currently Displaying: <span id="currenttag"/></p>

       
       
	<script type="text/javascript"><!--
var maxWidth = 200;
var minWidth = 50;
var sensitivity = lift (function (x1, x2) { return x1 + x2; },
    lift (function (x1, x2) { return x1 * x2; },
        maxWidth,
        1.5),
    40);
var numImages = 5;
var mouseL = __maybeLiftCall (mouseLeft, "images");
function computeCenter (imageName) {
    return __maybeLiftCall (lift, function (x) {
        return lift (function (x1, x2) { return x1 + x2; },
            lift (function (x1, x2) { return x1[x2]; },
                __maybeLiftCall ($, imageName),
                "offsetLeft"),
            lift (function (x1, x2) { return x1 * x2; },
                lift (function (x1, x2) { return x1 / x2; },
                    1,
                    2),
                lift (function (x1, x2) { return x1[x2]; },
                    __maybeLiftCall ($, imageName),
                    "width")));
    }
    , mouseL);
}
function computeDistanceToMouse (outerDiv, innerImage) {
    distance = lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
        Math,
        "abs",
        lift (function (x1, x2) { return x1 - x2; },
            mouseL,
            __maybeLiftCall (computeCenter, innerImage)));
    safeDist = lift (function (x1, x2, x3) { return x1 ? x2 : x3; },
        lift (function (x1, x2) { return x1 < x2; },
            distance,
            2),
        2,
        distance);
    return safeDist;
}
function widthBasedOnDistance (outerDiv, innerImage) {
    distToMouse = __maybeLiftCall (computeDistanceToMouse, outerDiv, innerImage);
    return __maybeLiftCall (lift, function (dist) {
        if (__JSValueOrDie (lift (function (x1, x2) { return x1 > x2; },
            dist,
            lift (function (x1, x2) { return x1 - x2; },
                sensitivity,
                1)))) {
            return minWidth;
        }
         else {
            var res = lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                Math,
                "round",
                lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                    Math,
                    "max",
                    minWidth, lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                        Math,
                        "min",
                        maxWidth, lift (function (x1, x2) { return x1 / x2; },
                            lift (function (x1, x2) { return x1 * x2; },
                                maxWidth,
                                lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                                    Math,
                                    "log",
                                    lift (function (x1, x2) { return x1 - x2; },
                                        sensitivity,
                                        dist))),
                            lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                                Math,
                                "log",
                                sensitivity)))));
            return res;
        }
    }
    , distToMouse);
}
for (__JSValueOrDie (j = 1); __JSValueOrDie (lift (function (x1, x2) { return x1 < x2; },
    j,
    lift (function (x1, x2) { return x1 + x2; },
        numImages,
        1))); __JSValueOrDie (j = lift (function (x1, x2) { return x1 + x2; },
    j,
    1))) {
    lift(function (x1, x2, x3) { return x1[x2] = x3; },
        __maybeLiftCall ($, lift (function (x1, x2) { return x1 + x2; },
            "image",
            j)),
        "width",
        __maybeLiftCall (widthBasedOnDistance, "images", lift (function (x1, x2) { return x1 + x2; },
            "image",
            j)));
}
function jsonFlickrFeed (v) {
    var i = 1;
    var feedTag = null;
    if (__JSValueOrDie (lift (function (x1, x2) { return x1 == x2; },
        lift (function (x1, x2) { return x1[x2]; },
            v,
            "title"),
        "Everyone's photos"))) {
        feedTag = "All Photos";
    }
     else {
        re = /Photos from everyone tagged (.+)/;
        arr = lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
            lift (function (x1, x2) { return x1[x2]; },
                v,
                "title"),
            "match",
            re);
        feedTag = lift (function (x1, x2) { return x1[x2]; },
            arr,
            1);
    }
    __maybeLiftCall (insertValue, "", "loaddisplay");
    __maybeLiftCall (insertValue, feedTag, "currenttag", "innerHTML");
    for (__JSValueOrDie (i = 1); __JSValueOrDie (lift (function (x1, x2) { return x1 < x2; },
        i,
        lift (function (x1, x2) { return x1 + x2; },
            numImages,
            1))); __JSValueOrDie (i = lift (function (x1, x2) { return x1 + x2; },
        i,
        1))) {
        __maybeLiftCall (insertValue, lift (function (x1, x2) { return x1[x2]; },
            lift (function (x1, x2) { return x1[x2]; },
                lift (function (x1, x2) { return x1[x2]; },
                    lift (function (x1, x2) { return x1[x2]; },
                        v,
                        "items"),
                    i),
                "media"),
            "m"), lift (function (x1, x2) { return x1 + x2; },
            "image",
            i), "src");
    }
}
var inputText = __maybeLiftCall (extractValue, "nexTag");
var calmedText = __maybeLiftCall (calm, inputText, 2000);
var tagqueue = lift (function (o) { return new o; },
    Array);
var jsonResult = null;
function tagFilter (x) {
    if (__JSValueOrDie (lift (function (x1, x2) { return x1 > x2; },
        lift (function (x1, x2) { return x1[x2]; },
            x,
            "length"),
        0))) {
        if (__JSValueOrDie (lift (function (x1, x2) { return x1 == x2; },
            lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                tagqueue,
                "indexOf",
                x),
            lift (function (x) { return - x; }, 
                1)))) {
            lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                tagqueue,
                "push",
                x);
        }
        return x;
    }
}
var filteredCalmedText = __maybeLiftCall (tagFilter, calmedText);
function requestNextTag (x) {
    if (__JSValueOrDie (lift (function (x1, x2) { return x1 > x2; },
        lift (function (x1, x2) { return x1[x2]; },
            tagqueue,
            "length"),
        0))) {
        return lift (function (x1, x2) { return x1 + x2; },
            lift (function (x1, x2) { return x1 + x2; },
                lift (function (x1, x2) { return x1 + x2; },
                    "http://api.flickr.com/services/feeds/photos_public.gne?tags=",
                    lift (function (x1, x2) {
                         return x1[x2].apply (x1, xslice (arguments, 2));
                     },
                        tagqueue,
                        "shift")),
                "&"),
            "format=json");
    }
     else {
        return "http://api.flickr.com/services/feeds/photos_public.gne?format=json";
    }
}
var eightSecondQueueValue = __maybeLiftCall (requestNextTag, __maybeLiftCall (ticks, 8000));
var x = __maybeLiftCall (evalForeignScript, lift (mkObject,
    "url", eightSecondQueueValue,
    "globalArg", "jsonResult"));
var loading = __maybeLiftCall (insertValue, __maybeLiftCall (snapshot, eightSecondQueueValue, "Loading..."), "loaddisplay");


--></script>

   </body>
 </html>
